{"version":3,"sources":["icons/Settings.svg","icons/Upload.svg","icons/Code.svg","icons/Switch.svg","icons/Close.svg","Settings.tsx","gunMappings.ts","GunSelector.tsx","ContextMenu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Settings","props","settingName","settings","movementSmoothing","movementSmoothingFactor","panningLocked","showGrid","oneTabPolicy","autoCloseGunSelector","cameraZoomRate","backgroundColor","updateSetting","newValue","charAt","forceUpdate","eventBind","localStorage","setItem","JSON","stringify","Object","assign","parse","getItem","String","variableName","separatedVariable","replace","trim","toUpperCase","slice","settingsDisplay","setting","modify","onClick","className","type","autoComplete","autoCorrect","autoCapitalize","spellCheck","onChange","event","Number","target","value","console","warn","push","key","prettyPrintVariable","this","hidden","src","SettingsIcon","draggable","alt","closeSettings","CloseIcon","React","PureComponent","gunMappings","All","Assault","GrenadeLauncher","LaserDrill","Minigun","NapalmDestroyer","Pistol","Portafab","RocketLauncher","SatchelCharge","Scanner","Shotgun","SMG","SniperRifle","GunSelector","gunList","gun","selectGun","keys","ContextMenu","state","shown","left","top","contextRef","createRef","cachedReference","cachedEntries","leftClick","preventDefault","setState","document","removeEventListener","rightClick","entries","length","current","reference","clientX","clientY","addEventListener","render","map","entry","name","callback","ref","style","githubLink","App","userUploaded","settingsShown","gunSelectorShown","contextName","contextMenu","buttonContextMap","upload","loadDefaultSkin","change","cacheGuns","removeItem","window","location","reload","source","href","open","navigator","clipboard","writeText","scene","THREE","camera","innerWidth","innerHeight","renderer","antialias","controls","OrbitControls","domElement","currentSkin","currentGun","lastGunId","gunMeshCache","toDataUrl","then","baseUrl","loadWithTexture","forEach","gunName","a","OBJLoader2","load","mesh","textureBase","image","createElement","texture","needsUpdate","shader","color","flatShading","traverse","child","material","lastGun","getObjectById","remove","id","add","mountRef","uploadRef","uploadPassthrough","click","fileUploaded","files","reader","FileReader","result","toString","readAsDataURL","toggleSettings","attemptAutoCloseGunSelector","toggleGunSelector","settingChanged","log","enableDamping","dampingFactor","enablePan","zoomSpeed","grid","getObjectByName","visible","background","parseInt","gunSelected","resetContext","setContext","caller","position","set","setPixelRatio","devicePixelRatio","setSize","minDistance","maxDistance","aspect","updateProjectionMatrix","animate","requestAnimationFrame","update","Error","appendChild","gridHelper","url","Promise","res","xhr","XMLHttpRequest","onloadend","response","responseType","send","title","onMouseLeave","onMouseEnter","UploadIcon","SwitchIcon","CodeIcon","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","getElementById","URL","process","origin","fetch","headers","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ba921339.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Settings.982ae196.svg\";","module.exports = __webpack_public_path__ + \"static/media/Upload.90ba7a4b.svg\";","module.exports = __webpack_public_path__ + \"static/media/Code.3354fae2.svg\";","module.exports = __webpack_public_path__ + \"static/media/Switch.519a6516.svg\";","module.exports = __webpack_public_path__ + \"static/media/Close.35eee04d.svg\";","import React from 'react';\r\nimport './Settings.css';\r\n\r\nimport SettingsIcon from './icons/Settings.svg';\r\nimport CloseIcon from './icons/Close.svg';\r\n\r\nimport preval from 'preval.macro';\r\n\r\ntype SettingsProps = {\r\n    eventBind: (changed: string, newValue: any) => void,\r\n    closeSettings: () => void,\r\n    hidden: boolean\r\n}\r\n\r\nclass Settings extends React.PureComponent<SettingsProps> {\r\n    public settings: {[settingName: string]: any} = {\r\n        movementSmoothing: true,\r\n        movementSmoothingFactor: 0.05,\r\n        panningLocked: true,\r\n        showGrid: true,\r\n        oneTabPolicy: false,\r\n        autoCloseGunSelector: false,\r\n        cameraZoomRate: 1,\r\n        backgroundColor: '3A3A3A'\r\n    };\r\n\r\n    public prettyPrintVariable(variableName: string) {\r\n        const separatedVariable = variableName.replace(/([A-Z])/g, ' $1').replace(/_/g, '').trim();\r\n        \r\n        return separatedVariable.charAt(0).toUpperCase() + separatedVariable.slice(1);\r\n    }\r\n    \r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        Object.assign(this.settings, JSON.parse(localStorage.getItem('settings') || \"{}\"));\r\n        \r\n        // apply previous settings\r\n        for (const settingName in this.settings) {\r\n            if (settingName.charAt(0) === '_') return;\r\n            this.props.eventBind(settingName, this.settings[settingName]);\r\n        }\r\n\r\n        // add setting to bottom to know build time\r\n        this.settings[`_buildTime`] = String(preval`module.exports = new Date().toLocaleString();`);\r\n    }\r\n\r\n    public updateSetting = (settingName: string, newValue: any) => {\r\n        // readonly properties can't change!\r\n        if (settingName.charAt(0) === '_') return;\r\n\r\n        this.settings[settingName] = newValue;\r\n\r\n        this.forceUpdate();\r\n        this.props.eventBind(settingName, this.settings[settingName]);\r\n        localStorage.setItem('settings', JSON.stringify(this.settings))\r\n    }\r\n\r\n    render() {\r\n        let settingsDisplay = [];\r\n        for (const settingName in this.settings) {\r\n            const setting = this.settings[settingName];\r\n            let modify = <></>;\r\n\r\n            if (settingName.charAt(0) === '_') {\r\n                // readonly property\r\n                modify = <p>{setting}</p>\r\n            } else {\r\n                switch (typeof setting) {\r\n                    case 'boolean':\r\n                        modify = <div onClick={() => this.updateSetting(settingName, !this.settings[settingName])}className={`modify boolean ${setting ? 'active' : ''}`}>\r\n                            <div className=\"small-box\"></div>\r\n                        </div>\r\n                        break;\r\n                    case 'number':\r\n                        modify = <input type=\"number\" autoComplete=\"off\" autoCorrect=\"off\" autoCapitalize=\"off\" spellCheck=\"false\" onChange={event => this.updateSetting(settingName, Number(event.target.value))} value={setting} className=\"modify\" />\r\n                        break;\r\n                    case 'string':\r\n                        modify = <input type=\"text\" autoComplete=\"off\" autoCorrect=\"off\" autoCapitalize=\"off\" spellCheck=\"false\" onChange={event => this.updateSetting(settingName, event.target.value)} value={setting} className=\"modify\" />\r\n                        break;\r\n                    default:\r\n                        console.warn(`Input type ${typeof setting} for field ${settingName} is not supported.`);\r\n                }\r\n            }\r\n\r\n            settingsDisplay.push(<div className=\"setting-field\" key={settingName}>\r\n                <p>{this.prettyPrintVariable(settingName)}</p>\r\n                {modify}\r\n            </div>);\r\n        }\r\n\r\n        return <div className={`settings-container ${this.props.hidden ? 'hidden' : ''}`}>\r\n            <div className=\"settings\">\r\n                <div className=\"settings-header\">\r\n                    <div className=\"img-container\"><img src={SettingsIcon} draggable={false} alt=\"\" /></div>\r\n                    <p>Settings</p>\r\n                    <div className=\"close-container img-container\" onClick={this.props.closeSettings}><img src={CloseIcon} draggable={false} alt=\"Close\" /></div>\r\n                </div>\r\n                <div className=\"settings-content\">\r\n                    {settingsDisplay}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Settings;","const gunMappings: {[gunId: string]: string} = {\r\n    All: 'All Available Guns',\r\n    Assault: 'Assault Rifle',\r\n    GrenadeLauncher: 'Grenade Launcher',\r\n    LaserDrill: 'Laser Drill',\r\n    Minigun: 'Minigun',\r\n    NapalmDestroyer: 'Napalm Destroyer',\r\n    Pistol: 'Pistol',\r\n    Portafab: 'Portafab',\r\n    RocketLauncher: 'Rocket Launcher',\r\n    SatchelCharge: 'Satchel Charge',\r\n    Scanner: 'Scanner',\r\n    Shotgun: 'Shotgun',\r\n    SMG: 'Sub-Machine Gun',\r\n    SniperRifle: 'Sniper Rifle'\r\n};\r\n\r\nexport default gunMappings;","import React from 'react';\r\nimport './GunSelector.css';\r\nimport gunMappings from './gunMappings';\r\n\r\ntype GunSelectorProps = {\r\n    selectGun: (gunSelected: string) => void\r\n}\r\n\r\nclass GunSelector extends React.PureComponent<GunSelectorProps> {\r\n    render() {\r\n        let gunList = [];\r\n\r\n        for (const gun of Object.keys(gunMappings)) {\r\n            gunList.push(<div className=\"gun-field\" key={gun} onClick={() => this.props.selectGun(gun)}>\r\n                <p>{gunMappings[gun]}</p>\r\n            </div>)\r\n        };\r\n\r\n        return <div className=\"gun-selector\">\r\n            {gunList}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default GunSelector;","import React from 'react';\r\nimport './ContextMenu.css';\r\n\r\nexport type ContextMenuEntry = {\r\n    name: string,\r\n    callback: () => void\r\n}\r\n\r\ntype ContextMenuProps = {\r\n    reference: string,\r\n    entries: Array<ContextMenuEntry>\r\n}\r\n\r\nclass ContextMenu extends React.PureComponent<ContextMenuProps> {\r\n    state = {\r\n        shown: false,\r\n        left: 0,\r\n        top: 0\r\n    }\r\n\r\n    private contextRef = React.createRef<HTMLDivElement>();\r\n    private cachedReference = '';\r\n    private cachedEntries: Array<ContextMenuEntry> = [];\r\n\r\n    private leftClick = (event: MouseEvent) => {\r\n        event.preventDefault();\r\n\r\n        this.setState({\r\n            shown: false\r\n        });\r\n\r\n        document.removeEventListener('click', this.leftClick);\r\n    }\r\n\r\n    private rightClick = (event: MouseEvent) => {\r\n        event.preventDefault();\r\n\r\n        if (this.props.entries.length < 1) {\r\n            if (this.state.shown) {\r\n                this.setState({\r\n                    shown: false\r\n                });\r\n            }\r\n\r\n            return;\r\n        };\r\n\r\n        const contextMenu = this.contextRef.current;\r\n        if (!contextMenu) return;\r\n\r\n        this.cachedReference = this.props.reference;\r\n        this.cachedEntries = this.props.entries;\r\n        this.setState({\r\n            shown: true,\r\n            left: event.clientX,\r\n            top: event.clientY\r\n        }, () => {\r\n            document.addEventListener('click', this.leftClick);\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        // custom right click menu\r\n\t\tdocument.addEventListener('contextmenu', this.rightClick);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('contextmenu', this.rightClick);\r\n    }\r\n    \r\n    render = () => {\r\n        const entries = this.cachedEntries.map(entry => {\r\n            return <p className=\"entry\" key={entry.name} onClick={entry.callback}>\r\n                {entry.name}\r\n            </p>\r\n        });\r\n\r\n        return <div className={`context-menu ${this.state.shown ? '' : 'hidden'}`} ref={this.contextRef} style={{\r\n            left: this.state.left + 10,\r\n            top: this.state.top\r\n        }}>\r\n            <p className=\"header\">{this.cachedReference}</p>\r\n            {entries}\r\n        </div>;\r\n    };\r\n}\r\n\r\nexport default ContextMenu;","import React from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { OBJLoader2 } from 'three/examples/jsm/loaders/OBJLoader2';\nimport './App.css';\nimport { Object3D } from 'three';\n\nimport UploadIcon from './icons/Upload.svg';\nimport CodeIcon from './icons/Code.svg';\nimport SwitchIcon from './icons/Switch.svg';\nimport SettingsIcon from './icons/Settings.svg';\n\nimport Settings from './Settings';\nimport GunSelector from './GunSelector';\nimport gunMappings from './gunMappings';\nimport ContextMenu, { ContextMenuEntry } from './ContextMenu';\n\nconst githubLink = 'https://github.com/xethlyx/eclipsis-skin-preview';\n\nclass App extends React.PureComponent {\n\tstate = {\n\t\tuserUploaded: false,\n\t\tsettingsShown: false,\n\t\tgunSelectorShown: false,\n\n\t\tcontextName: '',\n\t\tcontextMenu: [] as Array<ContextMenuEntry>\n\t};\n\n\tprivate buttonContextMap: {[button: string]: Array<ContextMenuEntry>} = {\n\t\tupload: [\n\t\t\t{\n\t\t\t\tname: 'Reset Skin',\n\t\t\t\tcallback: () => this.loadDefaultSkin()\n\t\t\t}\n\t\t],\n\t\tchange: [\n\t\t\t{\n\t\t\t\tname: 'Refresh Gun Objects',\n\t\t\t\tcallback: () => this.cacheGuns()\n\t\t\t}\n\t\t],\n\t\tsettings: [\n\t\t\t{\n\t\t\t\tname: 'Reset Settings',\n\t\t\t\tcallback: () => {\n\t\t\t\t\tlocalStorage.removeItem('settings');\n\t\t\t\t\twindow.location.reload(false);\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\tsource: [\n\t\t\t{\n\t\t\t\tname: 'Open link in current tab',\n\t\t\t\tcallback: () => window.location.href = githubLink\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Open link in new tab',\n\t\t\t\tcallback: () => window.open(githubLink, '_BLANK')\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Copy link to clipboard',\n\t\t\t\tcallback: () => navigator.clipboard.writeText(githubLink)\n\t\t\t}\n\t\t]\n\t}\n\n\tprivate scene = new THREE.Scene();\n\tprivate camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n\tprivate renderer = new THREE.WebGLRenderer({\n\t\tantialias: true\n\t});\n\tprivate controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n\tprivate currentSkin = '';\n\tprivate currentGun = 'Assault';\n\n\tprivate lastGunId: null | number = null;\n\tprivate oneTabPolicy = false;\n\tprivate autoCloseGunSelector = false;\n\n\tpublic gunMeshCache: {[gunId: string]: Object3D} = {};\n\n\tcomponentDidMount() {\n\t\tif (!this.mountRef.current) throw new Error('Mount point not found');\n\n\t\tthis.mountRef.current.appendChild(this.renderer.domElement);\n\n\t\t// add stuff to the renderer\n\t\tconst gridHelper = new THREE.GridHelper(100, 100, new THREE.Color(0xFFFFFF));\n\t\tgridHelper.name = 'Grid';\n        gridHelper.position.set(0, -0.75, 0);\n\t\tthis.scene.add(gridHelper);\n\t\t\n\t\tthis.loadDefaultSkin();\n\t}\n\n\tprivate loadDefaultSkin = () => {\n\t\tthis.toDataUrl(`GunTexture.png`)\n\t\t\t.then(baseUrl => {\n\t\t\t\tthis.currentSkin = baseUrl;\n\t\t\t\tthis.loadWithTexture(this.currentSkin);\n\t\t\t});\n\t}\n\n\tconstructor(props: any) {\n\t\tsuper(props);\n\n        this.scene.background = new THREE.Color(0x3a3a3a);\n\t\tthis.camera.position.set(3, 2, 2);\n\t\tthis.renderer.setPixelRatio(window.devicePixelRatio);\n\t\tthis.renderer.setSize(window.innerWidth, window.innerHeight);\n\n\t\tthis.controls.enableDamping = true;\n\t\tthis.controls.zoomSpeed = 1;\n\t\tthis.controls.enablePan = false;\n\t\tthis.controls.minDistance = 1;\n\t\tthis.controls.maxDistance = 100;\n\n        window.addEventListener('resize', event => {\n            this.camera.aspect = window.innerWidth / window.innerHeight;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t\t\n            this.renderer.setPixelRatio(window.devicePixelRatio);\n            this.renderer.setSize(window.innerWidth, window.innerHeight);\n\t\t});\n\n\t\tthis.cacheGuns();\n\t\t\n\t\tconst animate = () => {\n            requestAnimationFrame(animate);\n            this.renderer.render(this.scene, this.camera);\n            this.controls.update();\n        }\n\t\tanimate();\n\t}\n\n\tprivate cacheGuns = () => {\n\t\tObject.keys(gunMappings).forEach(async gunName => {\n\t\t\tconst loader = new OBJLoader2();\n\n\t\t\tloader.load(\n\t\t\t\t`${gunName}.obj`,\n\t\t\t\tmesh => {\n\t\t\t\t\tthis.gunMeshCache[gunName] = mesh;\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic toDataUrl(url: string) {\n\t\treturn new Promise<string>(res => {\n\t\t\tconst xhr = new XMLHttpRequest();\n\n\t\t\txhr.addEventListener('load', event => {\n\t\t\t\tvar reader = new FileReader();\n\t\t\t\treader.onloadend = function() {\n\t\t\t\t\tres(reader.result?.toString());\n\t\t\t\t}\n\t\t\t\treader.readAsDataURL(xhr.response);\n\t\t\t});\n\n\t\t\txhr.open('GET', url);\n\t\t\txhr.responseType = 'blob';\n\t\t\txhr.send();\n\t\t});\n\t}\n\n\tprivate loadWithTexture = async(textureBase: string) => {\n\t\tconst mesh = this.gunMeshCache[this.currentGun];\n\n\t\tif (!mesh) {\n\t\t\tconsole.warn(`Gun ${this.currentGun} not found! Is it still loading?`);\n\t\t\treturn;\n\t\t}\n\n\t\t// making image load on update\n\t\tconst image = document.createElement('img');\n\t\timage.src = textureBase;\n\n\t\tconst texture = new THREE.Texture(image);\n\n\t\timage.addEventListener('load', event => {\n\t\t\ttexture.needsUpdate = true;\n\t\t});\n\n\t\tconst shader = new THREE.MeshBasicMaterial({\n\t\t\tcolor: 0xffffff,\n\t\t\tmap: texture,\n\t\t\tflatShading: true\n\t\t});\n\n\t\tmesh.traverse(child => {\n\t\t\tif (child instanceof THREE.Mesh) {\n\t\t\t\tchild.material = shader;\n\t\t\t}\n\t\t});\n\n\t\tif (this.lastGunId) {\n\t\t\tconst lastGun = this.scene.getObjectById(this.lastGunId);\n\n\t\t\tif (lastGun) this.scene.remove(lastGun);\n\t\t}\n\t\tthis.lastGunId = mesh.id;\n\t\t\n\n\t\tthis.scene.add(mesh);\n\t}\n\n\tprivate mountRef = React.createRef<HTMLDivElement>();\n\tprivate uploadRef = React.createRef<HTMLInputElement>();\n\n\tprivate uploadPassthrough = () => {\n\t\tthis.uploadRef.current?.click();\n\t}\n\n\tprivate fileUploaded = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\tif (!event.target.files || !event.target.files[0]) return;\n\n\t\tconst reader = new FileReader();\n\t\treader.addEventListener('load', event => {\n\t\t\tif (!event.target) return;\n\n\t\t\tthis.currentSkin = event.target.result?.toString() || '';\n\t\t\tthis.setState({\n\t\t\t\tuserUploaded: true\n\t\t\t});\n\n\t\t\tthis.loadWithTexture(this.currentSkin);\n\t\t});\n\n\t\treader.readAsDataURL(event.target.files[0]);\n\t}\n\n\tprivate toggleSettings = () => {\n\t\tthis.setState({\n\t\t\tgunSelectorShown: this.oneTabPolicy ? false : this.state.gunSelectorShown,\n\t\t\tsettingsShown: !this.state.settingsShown\n\t\t});\n\t}\n\n\tprivate attemptAutoCloseGunSelector = () => {\n\t\tif (this.autoCloseGunSelector) {\n\t\t\tthis.setState({\n\t\t\t\tgunSelectorShown: false\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate toggleGunSelector = () => {\n\t\tthis.setState({\n\t\t\tsettingsShown: this.oneTabPolicy ? false : this.state.settingsShown,\n\t\t\tgunSelectorShown: !this.state.gunSelectorShown\n\t\t});\n\t}\n\n\tprivate settingChanged = (settingChanged: string, newValue: any) => {\n\t\tconsole.log(`Settings ${settingChanged} was changed to ${newValue}`);\n\n\t\tswitch(settingChanged) {\n\t\t\tcase 'movementSmoothing':\n\t\t\t\tthis.controls.enableDamping = newValue;\n\t\t\t\tbreak;\n\t\t\tcase 'movementSmoothingFactor':\n\t\t\t\tthis.controls.dampingFactor = newValue;\n\t\t\t\tbreak;\n\t\t\tcase 'panningLocked':\n\t\t\t\tthis.controls.enablePan = !newValue;\n\t\t\t\tbreak;\n\t\t\tcase 'cameraZoomRate':\n\t\t\t\tthis.controls.zoomSpeed = newValue;\n\t\t\t\tbreak;\n\t\t\tcase 'showGrid':\n\t\t\t\tconst grid = this.scene.getObjectByName('Grid');\n\t\t\t\tif (grid) grid.visible = newValue;\n\t\t\t\tbreak;\n\t\t\tcase 'oneTabPolicy':\n\t\t\t\tthis.oneTabPolicy = newValue;\n\t\t\t\tbreak;\n\t\t\tcase 'autoCloseGunSelector':\n\t\t\t\tthis.autoCloseGunSelector = newValue;\n\t\t\t\tbreak;\n\t\t\tcase 'backgroundColor':\n\t\t\t\tthis.scene.background = new THREE.Color(Number.parseInt(newValue, 16));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn(`Property ${settingChanged} was changed, but no handler was attached!`);\n\t\t}\n\t}\n\n\tprivate selectGun = (gunSelected: string) => {\n\t\tthis.currentGun = gunSelected;\n\n\t\tthis.attemptAutoCloseGunSelector();\n\t\tthis.loadWithTexture(this.currentSkin);\n\t\tthis.forceUpdate();\n\t}\n\n\tprivate resetContext = () => {\n\t\tthis.setState({\n\t\t\tcontextMenu: []\n\t\t})\n\t}\n\n\tprivate setContext = (caller: string) => {\n\t\tthis.setState({\n\t\t\tcontextName: caller.toUpperCase(),\n\t\t\tcontextMenu: this.buttonContextMap[caller]\n\t\t});\n\t}\n\n\trender() {\n\t\treturn <>\n\t\t\t<ContextMenu reference={this.state.contextName} entries={this.state.contextMenu} />\n\t\t\t<input type=\"file\" className=\"hidden\" ref={this.uploadRef} onChange={this.fileUploaded}></input>\n\t\t\t<div className=\"app\" ref={this.mountRef}>\n\t\t\t\t<div className=\"sidebar\">\n\t\t\t\t\t<button title=\"Upload Skin\" onMouseLeave={this.resetContext} onMouseEnter={() => this.setContext('upload')} onClick={this.uploadPassthrough}><img alt=\"Upload Skin\" draggable={false} src={UploadIcon}></img></button>\n\t\t\t\t\t<button title=\"Change Gun\" onMouseLeave={this.resetContext} onMouseEnter={() => this.setContext('change')} onClick={this.toggleGunSelector}><img alt=\"Change Gun\" draggable={false} src={SwitchIcon}></img></button>\n\t\t\t\t\t<button title=\"Settings\" onMouseLeave={this.resetContext} onMouseEnter={() => this.setContext('settings')} onClick={this.toggleSettings}><img alt=\"Settings\" draggable={false} src={SettingsIcon}></img></button>\n\t\t\t\t\t<button title=\"View Source\" onMouseLeave={this.resetContext} onMouseEnter={() => this.setContext('source')} onClick={() => window.location.href = githubLink}><img alt=\"View Source\" draggable={false} src={CodeIcon}></img></button>\n\t\t\t\t</div>\n\t\t\t\t{!this.state.gunSelectorShown || <GunSelector selectGun={this.selectGun}/>}\n\t\t\t\t<Settings closeSettings={this.toggleSettings} eventBind={this.settingChanged} hidden={!this.state.settingsShown} />\n\t\t\t\t<div className=\"info-indicator\">\n\t\t\t\t\t<p>{this.state.userUploaded ? 'User Content' : 'System Default'}</p>\n\t\t\t\t\t<p>{gunMappings[this.currentGun]}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>;\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}