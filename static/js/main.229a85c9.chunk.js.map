{"version":3,"sources":["icons/Settings.svg","icons/Upload.svg","icons/Code.svg","icons/Switch.svg","icons/Close.svg","Settings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Settings","props","settingName","settings","movementSmoothing","panningLocked","showGrid","cameraZoomRate","updateSetting","newValue","forceUpdate","eventBind","localStorage","setItem","JSON","stringify","Object","assign","parse","getItem","variableName","separatedVariable","replace","trim","charAt","toUpperCase","slice","settingsDisplay","setting","modify","onClick","className","type","onChange","event","Number","target","value","console","warn","push","key","prettyPrintVariable","this","hidden","src","SettingsIcon","draggable","alt","closeSettings","CloseIcon","React","PureComponent","App","state","userUploaded","settingsShown","scene","THREE","camera","window","innerWidth","innerHeight","renderer","antialias","controls","OrbitControls","domElement","loader","OBJLoader2","currentSkin","currentGun","gunMappings","Assault","loadWithTexture","textureBase","a","Promise","res","load","object","mesh","image","document","createElement","texture","addEventListener","needsUpdate","shader","color","map","flatShading","name","traverse","child","material","oldGun","getObjectByName","remove","add","mountRef","createRef","uploadRef","uploadPassthrough","current","click","fileUploaded","files","reader","FileReader","result","toString","setState","readAsDataURL","toggleSettings","settingChanged","log","enableDamping","enablePan","zoomSpeed","grid","visible","background","position","set","setPixelRatio","devicePixelRatio","setSize","minDistance","maxDistance","aspect","updateProjectionMatrix","animate","requestAnimationFrame","render","update","Error","appendChild","gridHelper","toDataUrl","then","baseUrl","url","xhr","XMLHttpRequest","onloadend","response","open","responseType","send","ref","title","UploadIcon","SwitchIcon","location","href","CodeIcon","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","getElementById","URL","process","origin","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.229a85c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Settings.982ae196.svg\";","module.exports = __webpack_public_path__ + \"static/media/Upload.90ba7a4b.svg\";","module.exports = __webpack_public_path__ + \"static/media/Code.3354fae2.svg\";","module.exports = __webpack_public_path__ + \"static/media/Switch.519a6516.svg\";","module.exports = __webpack_public_path__ + \"static/media/Close.35eee04d.svg\";","import React from 'react';\r\nimport './Settings.css';\r\n\r\nimport SettingsIcon from './icons/Settings.svg';\r\nimport CloseIcon from './icons/Close.svg';\r\n\r\ntype SettingsProps = {\r\n    eventBind: (changed: string, newValue: any) => void,\r\n    closeSettings: () => void,\r\n    hidden: boolean\r\n}\r\n\r\nclass Settings extends React.PureComponent<SettingsProps> {\r\n    public settings: {[settingName: string]: any} = {\r\n        movementSmoothing: true,\r\n        panningLocked: true,\r\n        showGrid: true,\r\n        cameraZoomRate: 1\r\n    };\r\n\r\n    public prettyPrintVariable(variableName: string) {\r\n        const separatedVariable = variableName.replace(/([A-Z])/g, ' $1').trim();\r\n        \r\n        return separatedVariable.charAt(0).toUpperCase() + separatedVariable.slice(1);\r\n    }\r\n    \r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        Object.assign(this.settings, JSON.parse(localStorage.getItem('settings') || \"{}\"));\r\n        \r\n        // apply previous settings\r\n        for (const settingName in this.settings) {\r\n            this.props.eventBind(settingName, this.settings[settingName]);\r\n        }\r\n    }\r\n\r\n    public updateSetting = (settingName: string, newValue: any) => {\r\n        this.settings[settingName] = newValue;\r\n\r\n        this.forceUpdate();\r\n        this.props.eventBind(settingName, this.settings[settingName]);\r\n        localStorage.setItem('settings', JSON.stringify(this.settings))\r\n    }\r\n\r\n    render() {\r\n        let settingsDisplay = [];\r\n        for (const settingName in this.settings) {\r\n            const setting = this.settings[settingName];\r\n            let modify = <></>;\r\n\r\n            switch (typeof setting) {\r\n                case 'boolean':\r\n                    modify = <div onClick={() => this.updateSetting(settingName, !this.settings[settingName])}className={`modify boolean ${setting ? 'active' : ''}`}>\r\n                        <div className=\"small-box\"></div>\r\n                    </div>\r\n                    break;\r\n                case 'number':\r\n                    modify = <input type=\"number\" onChange={event => this.updateSetting(settingName, Number(event.target.value))} value={setting} className=\"modify\" />\r\n                    break;\r\n                default:\r\n                    console.warn(`Input type ${typeof setting} for field ${settingName} is not supported.`);\r\n            }\r\n\r\n            settingsDisplay.push(<div className=\"setting-field\" key={settingName}>\r\n                <p>{this.prettyPrintVariable(settingName)}</p>\r\n                {modify}\r\n            </div>);\r\n        }\r\n\r\n        return <div className={`settings-container ${this.props.hidden ? 'hidden' : ''}`}>\r\n            <div className=\"settings\">\r\n                <div className=\"settings-header\">\r\n                    <div className=\"img-container\"><img src={SettingsIcon} draggable={false} alt=\"\" /></div>\r\n                    <p>Settings</p>\r\n                    <div className=\"close-container img-container\" onClick={this.props.closeSettings}><img src={CloseIcon} draggable={false} alt=\"Close\" /></div>\r\n                </div>\r\n                <div className=\"settings-content\">\r\n                    {settingsDisplay}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Settings;","import React from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { OBJLoader2 } from 'three/examples/jsm/loaders/OBJLoader2';\nimport './App.css';\nimport { Object3D } from 'three';\n\nimport UploadIcon from './icons/Upload.svg';\nimport CodeIcon from './icons/Code.svg';\nimport SwitchIcon from './icons/Switch.svg';\nimport SettingsIcon from './icons/Settings.svg';\n\nimport Settings from './Settings';\n\nclass App extends React.PureComponent {\n\tstate = {\n\t\tuserUploaded: false,\n\t\tsettingsShown: false\n\t};\n\n\tprivate scene = new THREE.Scene();\n\tprivate camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n\tprivate renderer = new THREE.WebGLRenderer({\n\t\tantialias: true\n\t});\n\tprivate controls = new OrbitControls(this.camera, this.renderer.domElement);\n\tprivate loader = new OBJLoader2();\n\n\tprivate currentSkin = '';\n\tprivate currentGun = 'Assault';\n\n\tprivate gunMappings: {[gunId: string]: string} = {\n\t\tAssault: 'Assault Rifle'\n\t};\n\n\tcomponentDidMount() {\n\t\tif (!this.mountRef.current) throw new Error('Mount point not found');\n\n\t\tthis.mountRef.current.appendChild(this.renderer.domElement);\n\n\t\t// add stuff to the renderer\n\t\tconst gridHelper = new THREE.GridHelper(100, 100, new THREE.Color(0xFFFFFF));\n\t\tgridHelper.name = 'Grid';\n        gridHelper.position.set(0, -0.75, 0);\n\t\tthis.scene.add(gridHelper);\n\t\t\n\t\tthis.toDataUrl(`/GunTexture.png`)\n\t\t\t.then(baseUrl => {\n\t\t\t\tthis.loadWithTexture(baseUrl);\n\t\t\t});\n\t}\n\n\tconstructor(props: any) {\n\t\tsuper(props);\n\n        this.scene.background = new THREE.Color(0x3a3a3a);\n\t\tthis.camera.position.set(3, 2, 2);\n\t\tthis.renderer.setPixelRatio(window.devicePixelRatio);\n\t\tthis.renderer.setSize(window.innerWidth, window.innerHeight);\n\n\t\tthis.controls.enableDamping = true;\n\t\tthis.controls.zoomSpeed = 1;\n\t\tthis.controls.enablePan = false;\n\t\tthis.controls.minDistance = 1;\n\t\tthis.controls.maxDistance = 100;\n\n        window.addEventListener('resize', event => {\n            this.camera.aspect = window.innerWidth / window.innerHeight;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t\t\n            this.renderer.setPixelRatio(window.devicePixelRatio);\n            this.renderer.setSize(window.innerWidth, window.innerHeight);\n\t\t});\n\t\t\n\t\tconst animate = () => {\n            requestAnimationFrame(animate);\n            this.renderer.render(this.scene, this.camera);\n            this.controls.update();\n        }\n        animate();\n\t}\n\n\tpublic toDataUrl(url: string) {\n\t\treturn new Promise<string>(res => {\n\t\t\tconst xhr = new XMLHttpRequest();\n\n\t\t\txhr.addEventListener('load', event => {\n\t\t\t\tvar reader = new FileReader();\n\t\t\t\treader.onloadend = function() {\n\t\t\t\t\tres(reader.result?.toString());\n\t\t\t\t}\n\t\t\t\treader.readAsDataURL(xhr.response);\n\t\t\t});\n\n\t\t\txhr.open('GET', url);\n\t\t\txhr.responseType = 'blob';\n\t\t\txhr.send();\n\t\t});\n\t}\n\n\tprivate loadWithTexture = async(textureBase: string) => {\n\t\tconst mesh = await new Promise<Object3D>((res) => {\n\t\t\tthis.loader.load(\n\t\t\t\t`/${this.currentGun}.obj`,\n\t\t\t\tobject => {\n\t\t\t\t\tres(object);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\n\t\t// making image load on update\n\t\tconst image = document.createElement('img');\n\t\timage.src = textureBase;\n\n\t\tconst texture = new THREE.Texture(image);\n\n\t\timage.addEventListener('load', event => {\n\t\t\ttexture.needsUpdate = true;\n\t\t});\n\n\t\tconst shader = new THREE.MeshBasicMaterial({\n\t\t\tcolor: 0xffffff,\n\t\t\tmap: texture,\n\t\t\tflatShading: true\n\t\t});\n\n\t\tmesh.name = 'Gun';\n\t\tmesh.traverse(child => {\n\t\t\tif (child instanceof THREE.Mesh) {\n\t\t\t\tchild.material = shader;\n\t\t\t}\n\t\t});\n\n\t\tconst oldGun = this.scene.getObjectByName('Gun');\n\t\tif (oldGun) {\n\t\t\tthis.scene.remove(oldGun);\n\t\t}\n\n\t\tthis.scene.add(mesh);\n\t}\n\n\tprivate mountRef = React.createRef<HTMLDivElement>();\n\tprivate uploadRef = React.createRef<HTMLInputElement>();\n\n\tprivate uploadPassthrough = () => {\n\t\tthis.uploadRef.current?.click();\n\t}\n\n\tprivate fileUploaded = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\tif (!event.target.files || !event.target.files[0]) return;\n\n\t\tconst reader = new FileReader();\n\t\treader.addEventListener('load', event => {\n\t\t\tif (!event.target) return;\n\n\t\t\tthis.currentSkin = event.target.result?.toString() || '';\n\t\t\tthis.setState({\n\t\t\t\tuserUploaded: true\n\t\t\t});\n\n\t\t\tthis.loadWithTexture(this.currentSkin);\n\t\t});\n\n\t\treader.readAsDataURL(event.target.files[0]);\n\t}\n\n\tprivate toggleSettings = () => {\n\t\tthis.setState({\n\t\t\tsettingsShown: !this.state.settingsShown\n\t\t});\n\t}\n\n\tprivate settingChanged = (settingChanged: string, newValue: any) => {\n\t\tconsole.log(`Settings ${settingChanged} was changed to ${newValue}`);\n\n\t\tswitch(settingChanged) {\n\t\t\tcase 'movementSmoothing':\n\t\t\t\tthis.controls.enableDamping = newValue;\n\t\t\t\tbreak;\n\t\t\tcase 'panningLocked':\n\t\t\t\tthis.controls.enablePan = !newValue;\n\t\t\t\tbreak;\n\t\t\tcase 'cameraZoomRate':\n\t\t\t\tthis.controls.zoomSpeed = newValue;\n\t\t\t\tbreak;\n\t\t\tcase 'showGrid':\n\t\t\t\tconst grid = this.scene.getObjectByName('Grid');\n\t\t\t\tif (grid) grid.visible = newValue;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn(`Property ${settingChanged} was changed, but no handler was attached!`);\n\t\t}\n\t}\n\n\trender() {\n\t\treturn <>\n\t\t\t<input type=\"file\" className=\"hidden\" ref={this.uploadRef} onChange={this.fileUploaded}></input>\n\t\t\t<div className=\"app\" ref={this.mountRef}>\n\t\t\t\t<div className=\"sidebar\">\n\t\t\t\t\t<button title=\"Upload Skin\" onClick={this.uploadPassthrough}><img alt=\"Upload Skin\" draggable={false} src={UploadIcon}></img></button>\n\t\t\t\t\t<button title=\"Change Gun\"><img alt=\"Change Gun\" draggable={false} src={SwitchIcon}></img></button>\n\t\t\t\t\t<button title=\"Settings\" onClick={this.toggleSettings}><img alt=\"Settings\" draggable={false} src={SettingsIcon}></img></button>\n\t\t\t\t\t<button title=\"View Source\" onClick={() => window.location.href = 'https://github.com/xethlyx/eclipsis-skin-preview'}><img alt=\"View Source\" draggable={false} src={CodeIcon}></img></button>\n\t\t\t\t</div>\n\t\t\t\t<Settings closeSettings={this.toggleSettings} eventBind={this.settingChanged} hidden={!this.state.settingsShown} />\n\t\t\t\t<div className=\"info-indicator\">\n\t\t\t\t\t<p>{this.state.userUploaded ? 'User Content' : 'System Default'}</p>\n\t\t\t\t\t<p>{this.gunMappings[this.currentGun]}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>;\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}