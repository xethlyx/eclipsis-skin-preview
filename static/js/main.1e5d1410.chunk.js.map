{"version":3,"sources":["icons/Settings.svg","icons/Upload.svg","icons/Code.svg","icons/Switch.svg","icons/Close.svg","Settings.tsx","gunMappings.ts","GunSelector.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Settings","props","settingName","settings","movementSmoothing","panningLocked","showGrid","oneTabPolicy","autoCloseGunSelector","cameraZoomRate","updateSetting","newValue","forceUpdate","eventBind","localStorage","setItem","JSON","stringify","Object","assign","parse","getItem","String","variableName","separatedVariable","replace","trim","charAt","toUpperCase","slice","settingsDisplay","setting","modify","onClick","className","type","onChange","event","Number","target","value","console","warn","push","key","prettyPrintVariable","this","hidden","src","SettingsIcon","draggable","alt","closeSettings","CloseIcon","React","PureComponent","gunMappings","All","Assault","GrenadeLauncher","LaserDrill","Minigun","NapalmDestroyer","Pistol","Portafab","RocketLauncher","SatchelCharge","Scanner","Shotgun","SMG","SniperRifle","GunSelector","gunList","gun","selectGun","keys","App","state","userUploaded","settingsShown","gunSelectorShown","scene","THREE","camera","window","innerWidth","innerHeight","renderer","antialias","controls","OrbitControls","domElement","currentSkin","currentGun","lastGunId","loadWithTexture","textureBase","a","loader","OBJLoader2","Promise","res","load","object","mesh","image","document","createElement","texture","addEventListener","needsUpdate","shader","color","map","flatShading","traverse","child","material","lastGun","getObjectById","remove","id","add","mountRef","createRef","uploadRef","uploadPassthrough","current","click","fileUploaded","files","reader","FileReader","result","toString","setState","readAsDataURL","toggleSettings","attemptAutoCloseGunSelector","toggleGunSelector","settingChanged","log","enableDamping","enablePan","zoomSpeed","grid","getObjectByName","visible","gunSelected","background","position","set","setPixelRatio","devicePixelRatio","setSize","minDistance","maxDistance","aspect","updateProjectionMatrix","animate","requestAnimationFrame","render","update","Error","appendChild","gridHelper","name","toDataUrl","then","baseUrl","url","xhr","XMLHttpRequest","onloadend","response","open","responseType","send","ref","title","UploadIcon","SwitchIcon","location","href","CodeIcon","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","gunName","gunObjects","fetch","all","ReactDOM","StrictMode","getElementById","URL","process","origin","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1e5d1410.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Settings.982ae196.svg\";","module.exports = __webpack_public_path__ + \"static/media/Upload.90ba7a4b.svg\";","module.exports = __webpack_public_path__ + \"static/media/Code.3354fae2.svg\";","module.exports = __webpack_public_path__ + \"static/media/Switch.519a6516.svg\";","module.exports = __webpack_public_path__ + \"static/media/Close.35eee04d.svg\";","import React from 'react';\r\nimport './Settings.css';\r\n\r\nimport SettingsIcon from './icons/Settings.svg';\r\nimport CloseIcon from './icons/Close.svg';\r\n\r\nimport preval from 'preval.macro';\r\n\r\ntype SettingsProps = {\r\n    eventBind: (changed: string, newValue: any) => void,\r\n    closeSettings: () => void,\r\n    hidden: boolean\r\n}\r\n\r\nclass Settings extends React.PureComponent<SettingsProps> {\r\n    public settings: {[settingName: string]: any} = {\r\n        movementSmoothing: true,\r\n        panningLocked: true,\r\n        showGrid: true,\r\n        oneTabPolicy: false,\r\n        autoCloseGunSelector: false,\r\n        cameraZoomRate: 1,\r\n    };\r\n\r\n    public prettyPrintVariable(variableName: string) {\r\n        const separatedVariable = variableName.replace(/([A-Z])/g, ' $1').replace(/_/g, '').trim();\r\n        \r\n        return separatedVariable.charAt(0).toUpperCase() + separatedVariable.slice(1);\r\n    }\r\n    \r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        Object.assign(this.settings, JSON.parse(localStorage.getItem('settings') || \"{}\"));\r\n        \r\n        // apply previous settings\r\n        for (const settingName in this.settings) {\r\n            this.props.eventBind(settingName, this.settings[settingName]);\r\n        }\r\n\r\n        // add setting to bottom to know build time\r\n        this.settings[`_buildTime`] = String(preval`module.exports = new Date().toLocaleString();`);\r\n    }\r\n\r\n    public updateSetting = (settingName: string, newValue: any) => {\r\n        this.settings[settingName] = newValue;\r\n\r\n        this.forceUpdate();\r\n        this.props.eventBind(settingName, this.settings[settingName]);\r\n        localStorage.setItem('settings', JSON.stringify(this.settings))\r\n    }\r\n\r\n    render() {\r\n        let settingsDisplay = [];\r\n        for (const settingName in this.settings) {\r\n            const setting = this.settings[settingName];\r\n            let modify = <></>;\r\n\r\n            if (settingName.charAt(0) === '_') {\r\n                // readonly property\r\n                modify = <p>{setting}</p>\r\n            } else {\r\n                switch (typeof setting) {\r\n                    case 'boolean':\r\n                        modify = <div onClick={() => this.updateSetting(settingName, !this.settings[settingName])}className={`modify boolean ${setting ? 'active' : ''}`}>\r\n                            <div className=\"small-box\"></div>\r\n                        </div>\r\n                        break;\r\n                    case 'number':\r\n                        modify = <input type=\"number\" onChange={event => this.updateSetting(settingName, Number(event.target.value))} value={setting} className=\"modify\" />\r\n                        break;\r\n                    case 'string':\r\n                        modify = <input type=\"text\" onChange={event => this.updateSetting(settingName, event.target.value)} value={setting} className=\"modify\" />\r\n                        break;\r\n                    default:\r\n                        console.warn(`Input type ${typeof setting} for field ${settingName} is not supported.`);\r\n                }\r\n            }\r\n\r\n            settingsDisplay.push(<div className=\"setting-field\" key={settingName}>\r\n                <p>{this.prettyPrintVariable(settingName)}</p>\r\n                {modify}\r\n            </div>);\r\n        }\r\n\r\n        return <div className={`settings-container ${this.props.hidden ? 'hidden' : ''}`}>\r\n            <div className=\"settings\">\r\n                <div className=\"settings-header\">\r\n                    <div className=\"img-container\"><img src={SettingsIcon} draggable={false} alt=\"\" /></div>\r\n                    <p>Settings</p>\r\n                    <div className=\"close-container img-container\" onClick={this.props.closeSettings}><img src={CloseIcon} draggable={false} alt=\"Close\" /></div>\r\n                </div>\r\n                <div className=\"settings-content\">\r\n                    {settingsDisplay}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Settings;","const gunMappings: {[gunId: string]: string} = {\r\n    All: 'All Available Guns',\r\n    Assault: 'Assault Rifle',\r\n    GrenadeLauncher: 'Grenade Launcher',\r\n    LaserDrill: 'Laser Drill',\r\n    Minigun: 'Minigun',\r\n    NapalmDestroyer: 'Napalm Destroyer',\r\n    Pistol: 'Pistol',\r\n    Portafab: 'Portafab',\r\n    RocketLauncher: 'Rocket Launcher',\r\n    SatchelCharge: 'Satchel Charge',\r\n    Scanner: 'Scanner',\r\n    Shotgun: 'Shotgun',\r\n    SMG: 'Sub-Machine Gun',\r\n    SniperRifle: 'Sniper Rifle'\r\n};\r\n\r\nexport default gunMappings;","import React from 'react';\r\nimport './GunSelector.css';\r\nimport gunMappings from './gunMappings';\r\n\r\ntype GunSelectorProps = {\r\n    selectGun: (gunSelected: string) => void\r\n}\r\n\r\nclass GunSelector extends React.PureComponent<GunSelectorProps> {\r\n    render() {\r\n        let gunList = [];\r\n\r\n        for (const gun of Object.keys(gunMappings)) {\r\n            gunList.push(<div className=\"gun-field\" key={gun} onClick={() => this.props.selectGun(gun)}>\r\n                <p>{gunMappings[gun]}</p>\r\n            </div>)\r\n        };\r\n\r\n        return <div className=\"gun-selector\">\r\n            {gunList}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default GunSelector;","import React from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { OBJLoader2 } from 'three/examples/jsm/loaders/OBJLoader2';\nimport './App.css';\nimport { Object3D } from 'three';\n\nimport UploadIcon from './icons/Upload.svg';\nimport CodeIcon from './icons/Code.svg';\nimport SwitchIcon from './icons/Switch.svg';\nimport SettingsIcon from './icons/Settings.svg';\n\nimport Settings from './Settings';\nimport GunSelector from './GunSelector';\nimport gunMappings from './gunMappings';\n\nclass App extends React.PureComponent {\n\tstate = {\n\t\tuserUploaded: false,\n\t\tsettingsShown: false,\n\t\tgunSelectorShown: false\n\t};\n\n\tprivate scene = new THREE.Scene();\n\tprivate camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n\tprivate renderer = new THREE.WebGLRenderer({\n\t\tantialias: true\n\t});\n\tprivate controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n\tprivate currentSkin = '';\n\tprivate currentGun = 'Assault';\n\n\tprivate lastGunId: null | number = null;\n\tprivate oneTabPolicy = false;\n\tprivate autoCloseGunSelector = false;\n\n\tcomponentDidMount() {\n\t\tif (!this.mountRef.current) throw new Error('Mount point not found');\n\n\t\tthis.mountRef.current.appendChild(this.renderer.domElement);\n\n\t\t// add stuff to the renderer\n\t\tconst gridHelper = new THREE.GridHelper(100, 100, new THREE.Color(0xFFFFFF));\n\t\tgridHelper.name = 'Grid';\n        gridHelper.position.set(0, -0.75, 0);\n\t\tthis.scene.add(gridHelper);\n\t\t\n\t\tthis.toDataUrl(`GunTexture.png`)\n\t\t\t.then(baseUrl => {\n\t\t\t\tthis.currentSkin = baseUrl;\n\t\t\t\tthis.loadWithTexture(this.currentSkin);\n\t\t\t});\n\t}\n\n\tconstructor(props: any) {\n\t\tsuper(props);\n\n        this.scene.background = new THREE.Color(0x3a3a3a);\n\t\tthis.camera.position.set(3, 2, 2);\n\t\tthis.renderer.setPixelRatio(window.devicePixelRatio);\n\t\tthis.renderer.setSize(window.innerWidth, window.innerHeight);\n\n\t\tthis.controls.enableDamping = true;\n\t\tthis.controls.zoomSpeed = 1;\n\t\tthis.controls.enablePan = false;\n\t\tthis.controls.minDistance = 1;\n\t\tthis.controls.maxDistance = 100;\n\n        window.addEventListener('resize', event => {\n            this.camera.aspect = window.innerWidth / window.innerHeight;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t\t\n            this.renderer.setPixelRatio(window.devicePixelRatio);\n            this.renderer.setSize(window.innerWidth, window.innerHeight);\n\t\t});\n\t\t\n\t\tconst animate = () => {\n            requestAnimationFrame(animate);\n            this.renderer.render(this.scene, this.camera);\n            this.controls.update();\n        }\n        animate();\n\t}\n\n\tpublic toDataUrl(url: string) {\n\t\treturn new Promise<string>(res => {\n\t\t\tconst xhr = new XMLHttpRequest();\n\n\t\t\txhr.addEventListener('load', event => {\n\t\t\t\tvar reader = new FileReader();\n\t\t\t\treader.onloadend = function() {\n\t\t\t\t\tres(reader.result?.toString());\n\t\t\t\t}\n\t\t\t\treader.readAsDataURL(xhr.response);\n\t\t\t});\n\n\t\t\txhr.open('GET', url);\n\t\t\txhr.responseType = 'blob';\n\t\t\txhr.send();\n\t\t});\n\t}\n\n\tprivate loadWithTexture = async(textureBase: string) => {\n\t\tconst loader = new OBJLoader2();\n\n\t\tconst mesh = await new Promise<Object3D>((res) => {\n\t\t\tloader.load(\n\t\t\t\t`${this.currentGun}.obj`,\n\t\t\t\tobject => {\n\t\t\t\t\tres(object);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\n\t\t// making image load on update\n\t\tconst image = document.createElement('img');\n\t\timage.src = textureBase;\n\n\t\tconst texture = new THREE.Texture(image);\n\n\t\timage.addEventListener('load', event => {\n\t\t\ttexture.needsUpdate = true;\n\t\t});\n\n\t\tconst shader = new THREE.MeshBasicMaterial({\n\t\t\tcolor: 0xffffff,\n\t\t\tmap: texture,\n\t\t\tflatShading: true\n\t\t});\n\n\t\tmesh.traverse(child => {\n\t\t\tif (child instanceof THREE.Mesh) {\n\t\t\t\tchild.material = shader;\n\t\t\t}\n\t\t});\n\n\t\tif (this.lastGunId) {\n\t\t\tconst lastGun = this.scene.getObjectById(this.lastGunId);\n\n\t\t\tif (lastGun) this.scene.remove(lastGun);\n\t\t}\n\t\tthis.lastGunId = mesh.id;\n\t\t\n\n\t\tthis.scene.add(mesh);\n\t}\n\n\tprivate mountRef = React.createRef<HTMLDivElement>();\n\tprivate uploadRef = React.createRef<HTMLInputElement>();\n\n\tprivate uploadPassthrough = () => {\n\t\tthis.uploadRef.current?.click();\n\t}\n\n\tprivate fileUploaded = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\tif (!event.target.files || !event.target.files[0]) return;\n\n\t\tconst reader = new FileReader();\n\t\treader.addEventListener('load', event => {\n\t\t\tif (!event.target) return;\n\n\t\t\tthis.currentSkin = event.target.result?.toString() || '';\n\t\t\tthis.setState({\n\t\t\t\tuserUploaded: true\n\t\t\t});\n\n\t\t\tthis.loadWithTexture(this.currentSkin);\n\t\t});\n\n\t\treader.readAsDataURL(event.target.files[0]);\n\t}\n\n\tprivate toggleSettings = () => {\n\t\tthis.setState({\n\t\t\tgunSelectorShown: this.oneTabPolicy ? false : this.state.gunSelectorShown,\n\t\t\tsettingsShown: !this.state.settingsShown\n\t\t});\n\t}\n\n\tprivate attemptAutoCloseGunSelector = () => {\n\t\tif (this.autoCloseGunSelector) {\n\t\t\tthis.setState({\n\t\t\t\tgunSelectorShown: false\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate toggleGunSelector = () => {\n\t\tthis.setState({\n\t\t\tsettingsShown: this.oneTabPolicy ? false : this.state.settingsShown,\n\t\t\tgunSelectorShown: !this.state.gunSelectorShown\n\t\t});\n\t}\n\n\tprivate settingChanged = (settingChanged: string, newValue: any) => {\n\t\tconsole.log(`Settings ${settingChanged} was changed to ${newValue}`);\n\n\t\tswitch(settingChanged) {\n\t\t\tcase 'movementSmoothing':\n\t\t\t\tthis.controls.enableDamping = newValue;\n\t\t\t\tbreak;\n\t\t\tcase 'panningLocked':\n\t\t\t\tthis.controls.enablePan = !newValue;\n\t\t\t\tbreak;\n\t\t\tcase 'cameraZoomRate':\n\t\t\t\tthis.controls.zoomSpeed = newValue;\n\t\t\t\tbreak;\n\t\t\tcase 'showGrid':\n\t\t\t\tconst grid = this.scene.getObjectByName('Grid');\n\t\t\t\tif (grid) grid.visible = newValue;\n\t\t\t\tbreak;\n\t\t\tcase 'oneTabPolicy':\n\t\t\t\tthis.oneTabPolicy = newValue;\n\t\t\t\tbreak;\n\t\t\tcase 'autoCloseGunSelector':\n\t\t\t\tthis.autoCloseGunSelector = newValue;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn(`Property ${settingChanged} was changed, but no handler was attached!`);\n\t\t}\n\t}\n\n\tprivate selectGun = (gunSelected: string) => {\n\t\tthis.currentGun = gunSelected;\n\n\t\tthis.attemptAutoCloseGunSelector();\n\t\tthis.loadWithTexture(this.currentSkin);\n\t\tthis.forceUpdate();\n\t}\n\n\trender() {\n\t\treturn <>\n\t\t\t<input type=\"file\" className=\"hidden\" ref={this.uploadRef} onChange={this.fileUploaded}></input>\n\t\t\t<div className=\"app\" ref={this.mountRef}>\n\t\t\t\t<div className=\"sidebar\">\n\t\t\t\t\t<button title=\"Upload Skin\" onClick={this.uploadPassthrough}><img alt=\"Upload Skin\" draggable={false} src={UploadIcon}></img></button>\n\t\t\t\t\t<button title=\"Change Gun\" onClick={this.toggleGunSelector}><img alt=\"Change Gun\" draggable={false} src={SwitchIcon}></img></button>\n\t\t\t\t\t<button title=\"Settings\" onClick={this.toggleSettings}><img alt=\"Settings\" draggable={false} src={SettingsIcon}></img></button>\n\t\t\t\t\t<button title=\"View Source\" onClick={() => window.location.href = 'https://github.com/xethlyx/eclipsis-skin-preview'}><img alt=\"View Source\" draggable={false} src={CodeIcon}></img></button>\n\t\t\t\t</div>\n\t\t\t\t{!this.state.gunSelectorShown || <GunSelector selectGun={this.selectGun}/>}\n\t\t\t\t<Settings closeSettings={this.toggleSettings} eventBind={this.settingChanged} hidden={!this.state.settingsShown} />\n\t\t\t\t<div className=\"info-indicator\">\n\t\t\t\t\t<p>{this.state.userUploaded ? 'User Content' : 'System Default'}</p>\n\t\t\t\t\t<p>{gunMappings[this.currentGun]}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>;\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport gunMappings from './gunMappings';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nasync function serviceWorkerSuccess() {\n    // fetch URLs to be cached for offline use\n    // this works because this implementation of workbox uses a cache-first approach\n    const gunObjects = [];\n\n    for (const gunName in gunMappings) {\n        gunObjects.push(fetch(`${gunName}.obj`));\n    }\n\n    await Promise.all(gunObjects);\n\n    console.log('Precaching done!')\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register({\n    onSuccess: serviceWorkerSuccess\n});\n"],"sourceRoot":""}